{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.js","components/Profile/ProfileInfo/ProfileInfo.js","components/Profile/MyPosts/Post/Post.js","components/Profile/MyPosts/MyPosts.js","components/Profile/MyPosts/MyPostsContainer.js","components/Profile/Profile.js","components/Profile/ProfileContainer.js"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","event","currentTarget","value","ProfileData","profile","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Object","keys","contacts","map","key","contactTitle","contactValue","ProfileDataForm","Contact","className","style","contact","ProfileInfo","descriptionBlock","src","photos","large","userPhoto","mainPhoto","Post","item","message","like","maxLength10","maxLengthCreator","AddNewPostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","name","component","Textarea","validate","required","MyPosts","postsElements","posts","post","likesCount","id","postsBlock","formData","addPost","newPostText","MyPostsContainer","connect","state","profilePage","avatars","Profile","Preloader","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","React","Component","compose","userProfile","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.2bae6039.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__ti6nt\",\"contact\":\"ProfileInfo_contact__17jX-\",\"mainPhoto\":\"ProfileInfo_mainPhoto__imJtH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3iggj\",\"posts\":\"MyPosts_posts__1rnu_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3twkH\"};","import React, {useEffect, useState} from \"react\";\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    // выполняется после отрисовки компоненты всегда когда придет другой status\r\n    useEffect( () => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (event) => {\r\n        setStatus(event.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <b>Status: </b><span onDoubleClick={activateEditMode}>{status || \"---------\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input autoFocus={true}\r\n                       onBlur={deactivateEditMode}\r\n                       onChange={onStatusChange}\r\n                       value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React, {useState} from \"react\";\r\nimport style from \"./ProfileInfo.module.css\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\nconst ProfileInfo = ({isOwner, profile, status, updateStatus}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    return (\r\n        <div>\r\n            <div className={style.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} className={style.mainPhoto}/>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n\r\n                {editMode\r\n                    ? <ProfileDataForm profile={profile}/>\r\n                    : <ProfileData profile={profile} goToEditMode={() => {setEditMode(true)}}/>}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}) => {\r\n    return (\r\n        <div>\r\n            {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\r\n            <div><b>Full name</b>: {profile.fullName}</div>\r\n            <div><b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}</div>\r\n            {profile.lookingForAJob &&\r\n            <div><b>My professional skills</b>: {profile.lookingForAJobDescription}</div>}\r\n\r\n            <div><b>About me</b>: {profile.aboutMe}</div>\r\n            <div><b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n            })}</div>\r\n        </div>\r\n    )\r\n}\r\nconst ProfileDataForm = ({profile}) => {\r\n    return (\r\n        <div>\r\n            <div><b>Full name</b>: {profile.fullName}</div>\r\n            <div><b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}</div>\r\n            {profile.lookingForAJob &&\r\n            <div><b>My professional skills</b>: {profile.lookingForAJobDescription}</div>}\r\n\r\n            <div><b>About me</b>: {profile.aboutMe}</div>\r\n            <div><b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n            })}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Contact = ({contactTitle, contactValue}) => {\r\n    return <div className={style.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport style from './Post.module.css';\r\nimport userPhoto from \"../../../../assets/images/user.png\"\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={style.item}>\r\n            <img src={userPhoto}/>\r\n            {props.message}\r\n            <div>\r\n                <span>like {props.like}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport style from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst MyPosts = (props) => {\r\n\r\n    let postsElements = props.posts\r\n        .map(post => <Post message={post.message} like={post.likesCount} key={post.id}/>);\r\n\r\n    const onAddPost = (formData) => {\r\n        props.addPost(formData.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={style.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostReduxForm onSubmit={onAddPost}/>\r\n            <div className={style.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder=\"new post\" name=\"newPostText\" component={Textarea}\r\n                       validate={[required, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm({form: 'profileAddNewPostForm'})(AddNewPostForm);\r\n\r\nexport default MyPosts;","import React from \"react\";\r\nimport {addPost} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText,\r\n        avatars: state.profilePage.avatars,\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, {addPost})(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\n\r\nconst Profile = (props) => {\r\n\r\n    return (<>\r\n            {!props.profile\r\n                ? <Preloader/>\r\n                : <div>\r\n                    <ProfileInfo isOwner={props.isOwner} profile={props.profile} status={props.status}\r\n                                 updateStatus={props.updateStatus}/>\r\n                    <MyPostsContainer/>\r\n                </div>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Profile;","import Profile from \"./Profile\";\r\nimport React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    // срабатывает при первом монтировании компоненты\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    // срабатывает при каждом изменении props\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.userProfile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\n/* compose берет ProfileContainer и отдает сначала в withAuthRedirect,\r\n   затем вернувшийся результат в withRouter, а затем в connect */\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter\r\n)(ProfileContainer)"],"sourceRoot":""}